name: java-application-maven

on:
  push:
    branches: [ main ]

env:
  IMAGE_TAG: latest
  IMAGE_NAME: sample-java-app

jobs:
  test:
    runs-on: self-hosted
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    
    - name: Setup Java JDK
      uses: actions/setup-java@v3.14.1
      with:
        java-version: '17'
        distribution: 'oracle'
  
    - name: building the package
      run: |
          mvn test
  sonar_scan:
    runs-on: self-hosted
    needs: test
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Setup Java JDK
      uses: actions/setup-java@v3.14.1
      with:
        java-version: '17'
        distribution: 'oracle'

    - name: Build Project
      run: mvn package

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  build-docker-image:
    runs-on: self-hosted
    needs: sonar_scan
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app  # this will download JAR to ./app folder

    - name: build the docker image
      run: |
        docker build -t $IMAGE_NAME .
        docker image ls

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ vars.IMAGE_TAG }}
          # IMAGE_TAG: ${{ github.sha }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Output image URI
      run: echo "Image pushed to ${{ steps.build-image.outputs.image }}"

    # - uses: actions/checkout@v4
    #   with:
    #     # Disabling shallow clones is recommended for improving the relevancy of reporting
    #     fetch-depth: 0
        
    # - name: SonarQube Scan
    #   uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    # - name: SonarQube Quality Gate check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   with:
    #       pollingTimeoutSec: 600
    #   env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #       SONAR_HOST_URL: ${{ var.SONAR_HOST_URL }} #OPTIONAL




